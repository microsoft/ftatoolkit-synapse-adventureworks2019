{
	"name": "DeltaLake_Person",
	"properties": {
		"description": "Generating Person model",
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "adworks2019pool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "7fe3b39c-5ced-4f92-92a1-684017f8b9f4"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/808da420-460f-4c28-ac83-51c450872744/resourceGroups/synapse_adventureworks2019_rg/providers/Microsoft.Synapse/workspaces/synapse-instance-adventureworks2019-demo/bigDataPools/adworks2019pool",
				"name": "adworks2019pool",
				"type": "Spark",
				"endpoint": "https://synapse-instance-adventureworks2019-demo.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/adworks2019pool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"#Set up file paths\r\n",
					"personEmailRawPath = \"abfss://adventureworks2019@datalakeadworks2019demo.dfs.core.windows.net/PersonEmailAddress.parquet\"\r\n",
					"personRawPath = \"abfss://adventureworks2019@datalakeadworks2019demo.dfs.core.windows.net/PersonPerson.parquet\"\r\n",
					"personBronzeTablePath = 'abfss://adventureworks2019@datalakeadworks2019demo.dfs.core.windows.net/delta/personBronzeTable'\r\n",
					"personSilverTablePath = 'abfss://adventureworks2019@datalakeadworks2019demo.dfs.core.windows.net/delta/personSilverTable'\r\n",
					"personGoldTablePath = 'abfss://adventureworks2019@datalakeadworks2019demo.dfs.core.windows.net/delta/personGoldTable'"
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"df = spark.read.load(personRawPath, format='parquet')\r\n",
					"display(df.limit(10))"
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Save as Delta Table\r\n",
					"df.write.mode(\"overwrite\").format(\"delta\").save(personBronzeTablePath)"
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Load Bronze table into dataframe\r\n",
					"rawPersonDF = spark.read.format(\"delta\").load(personBronzeTablePath)\r\n",
					"rawPersonDF.show()"
				],
				"execution_count": 30
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Drop id field\r\n",
					"personDF2 = rawPersonDF.drop('rowguid')\r\n",
					"personDF2.show()"
				],
				"execution_count": 31
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Save Silver table\r\n",
					"personDF2.write.mode(\"overwrite\").format(\"delta\").option(\"overwriteSchema\", \"true\").save(personSilverTablePath)"
				],
				"execution_count": 32
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Dropping ModifiedDate column\r\n",
					"personDF3 = personDF2.drop('ModifiedDate')\r\n",
					"personDF3.show()"
				],
				"execution_count": 33
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Concating Region Province Country and droping extra columns\r\n",
					"from pyspark.sql.functions import concat_ws,col\r\n",
					"personDF4 = personDF3.withColumn(\"FullName\",concat_ws(\" \",col(\"FirstName\"),col(\"MiddleName\"),col(\"LastName\"))).drop(\"FirstName\").drop(\"MiddleName\").drop(\"LastName\")\r\n",
					"    \r\n",
					"personDF4.show()"
				],
				"execution_count": 34
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Update Silver Table\r\n",
					"personDF4.write.mode(\"overwrite\").format(\"delta\").option(\"overwriteSchema\", \"true\").save(personSilverTablePath)"
				],
				"execution_count": 35
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"personDF5 = personDF4.groupBy(\"PersonType\", \"EmailPromotion\").count().sort(\"EmailPromotion\")\r\n",
					"personDF5.show()"
				],
				"execution_count": 36
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Save Gold table\r\n",
					"personDF5.write.mode(\"overwrite\").save(personGoldTablePath)"
				],
				"execution_count": 37
			}
		]
	}
}